# -*- coding: utf-8 -*-
"""Training_Data.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/18q1ouRupSmhmLvri5sxfbuKTMwzpXjJy

This code tells you how to obtain data from excel.
"""

import pandas as pd
import csv
import numpy as np
import scipy as spy
import matplotlib.pyplot as plt
from sklearn import preprocessing

"""# New Section

# Data training

In order to do so, the data of the diabetes and the food menu are taken.
"""

read_file_1 = pd.read_excel("SwissRe Sourcing Data.xlsx",
                            sheet_name="Menus")

read_file_1.to_csv("SwissRe Sourcing Data.csv"
#                   index_col = 0
                   #index = None,
                   #header=True
                   )

#read_file_1.close()

#io.StringIO(df.to_csv()), index_col=0

print("Original data \n")
df = pd.DataFrame(pd.read_csv("SwissRe Sourcing Data.csv",index_col=0))
display(df)





"""# Now converting data to numpy"""

fields = ['Name',"Lactose free?","Gluten Free?","Vegan?","Vegetarian?"]
#fields.append("Lactose free?")
food_type_data = pd.DataFrame(pd.read_csv('/content/SwissRe Sourcing Data.csv',usecols=fields))
#food_type_data = food_type_data.reshape(149,5)
food_type_data = food_type_data.fillna(-1)
food_type_data = food_type_data.replace("x",1)
#print(fields,'\n')
print(type(food_type_data))
print(food_type_data.keys())
#print(food_type_data['Vegan?'])

display(food_type_data)
#print(food_type_data.head())



"""# Data analysis"""

lactose_free = food_type_data['Lactose free?']
gluten_free = food_type_data['Gluten Free?']
vegan = food_type_data['Vegan?']
vegetarian = food_type_data['Vegetarian?']

plt.hist(lactose_free,bins=3)
plt.title("Lactose free")

plt.hist(gluten_free,bins=3)
plt.title("Gluten free")

plt.hist(vegan,bins=3)
plt.title("Vegan")

plt.hist(vegetarian,bins=3)
plt.title("Vegetarian")

"""# Decision tree test

For uncertainty , we needed to test it out.
"""

from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

name = food_type_data['Name']
le = preprocessing.LabelEncoder()
le.fit(name)
one_hot_name = le.transform(name)
#one_hot_name = pd.get_dummies(name)
#print(one_hot_name)
food_type_data_label = food_type_data
food_type_data_label['Name'] = one_hot_name

## To decode these data , the following code should be used to obtain the string
# decoded_name = le.inverse_transform(one_hot_name)
# food_type_data_decoded = food_type_data_one_hot
# food_type_data_decoded['Name'] = decoded_name

Y_lactose_free = lactose_free
X_lactose_free = food_type_data_one_hot.drop(['Lactose free?'],axis=1)


X_train, X_test , y_train , y_test = train_test_split(
    X_lactose_free,Y_lactose_free,train_size=0.7,test_size=0.3
)


tree = DecisionTreeClassifier(random_state=0)
tree = tree.fit(X_train,y_train)


print("Accuracy on training set: {:.3f}",format(tree.score(X_train,y_train)))
print("Accuracy on test set: {:.3f}",format(tree.score(X_test,y_test)))

from sklearn.tree import export_graphviz
export_graphviz(tree,
                out_file="lactose_free_tree.dot"
                )

import graphviz

with open("lactose_free_tree.dot") as f:
  dot_graph = f.read()

display(graphviz.Source(dot_graph))

"""# Final training of the other 3 datas"""

# Training data for gluten free
Y_gluten_free = gluten_free
X_gluten_free = food_type_data_one_hot.drop(['Gluten Free?'],axis=1)


X_train, X_test , y_train , y_test = train_test_split(
    X_gluten_free,Y_gluten_free,train_size=0.7,test_size=0.3
)


tree = DecisionTreeClassifier(random_state=0)
tree = tree.fit(X_train,y_train)


print("Accuracy on training set: {:.3f}",format(tree.score(X_train,y_train)))
print("Accuracy on test set: {:.3f}",format(tree.score(X_test,y_test)))

export_graphviz(tree,
                out_file="gluten_free_tree.dot"
                )

with open("gluten_free_tree.dot") as f:
  dot_graph = f.read()

display(graphviz.Source(dot_graph))

# Training data for vegan
Y_vegan = vegan
X_vegan = food_type_data_one_hot.drop(['Vegan?'],axis=1)


X_train, X_test , y_train , y_test = train_test_split(
    X_vegan,Y_vegan,train_size=0.7,test_size=0.3
)


tree = DecisionTreeClassifier(random_state=0)
tree = tree.fit(X_train,y_train)


print("Accuracy on training set: {:.3f}",format(tree.score(X_train,y_train)))
print("Accuracy on test set: {:.3f}",format(tree.score(X_test,y_test)))

export_graphviz(tree,
                out_file="vegan_tree.dot"
                )

with open("vegan_tree.dot") as f:
  dot_graph = f.read()

display(graphviz.Source(dot_graph))

# Training data for vegetarian
Y_vegetarian = vegetarian
X_vegetarian = food_type_data_one_hot.drop(['Vegetarian?'],axis=1)


X_train, X_test , y_train , y_test = train_test_split(
    X_vegetarian,Y_vegetarian,train_size=0.7,test_size=0.3
)


tree = DecisionTreeClassifier(random_state=0)
tree = tree.fit(X_train,y_train)


print("Accuracy on training set: {:.3f}",format(tree.score(X_train,y_train)))
print("Accuracy on test set: {:.3f}",format(tree.score(X_test,y_test)))

export_graphviz(tree,
                out_file="vegetarian_tree.dot"
                )

with open("vegetarian_tree.dot") as f:
  dot_graph = f.read()

display(graphviz.Source(dot_graph))